[[google-setup]]
== Obtaining Firebase Cloud Messaging Credentials

Before the Android application is able to receive the notifications, you must set up access to the Firebase Console. Luckily, this is both easy and free to do, and doesn't require much set-up. As with iOS, you are only able to test out your push notifications in a real device. This section shows you how to obtain the credentials necessary to set up Firebase Cloud Messaging for your app, including:

* the Server key
* the Sender ID
* the `google-services.json` file that needs to be included in the app manifest in Android Studio.

=== Project Setup and App Registration using the Firebase Console

First, you must register with the Firebase Cloud Messaging (FCM) platform, formerly known as Google Cloud Messaging (GCM). You need a Google Account to do this. Start by opening the https://console.firebase.google.com[Firebase Console].

- If you haven't created a project, click _Create New Project_:

image:./img/create_new_project.png[Create New Project]

- Now give your new project a name:

image:./img/project_name.png[New Project Name]

- Once the project has been created you will be taken to the Overview screen. From there click the Settings icon located next to the project name in the sidebar, and in the pop-up menu click _Project Settings_.

image:./img/project_settings.png[Project Number]

On the _Project Settings screen_, switch to the _Cloud Messaging_ tab, where you can find the _Server key_ and _Sender ID_ (known in GCM as _Project Number_).   

image:./img/retrieve_credentials.png[Retrieve Credentials]

- As the final step of the setup procedure, you need to download the `google-services.json` file. To do this, first navigate to the Overview screen and click on _Add App_ (If you have no apps using FCM yet, select the option to _Add Firebase to your Android app_).

image:./img/add_app.png[Add Firebase to your app]

- In the pop-up window enter the Package name of your app and then click on _Add app_. This automatically generates the `google-services.json` file that must be added to your app manifest in Android Studio. Download the .json file and save it. To close the pop-up window, click _Continue_ and then _Finish_ on the following screen.

image:./img/package_name.png[Download google-services.json]

TIP: To re-download the google-services.json file, navigate to the _Project Settings_, then switch to the *General* tab, choose the desired app and click the google-services.json download button.

Now that Google is ready to accept and deliver our messages, we are ready to setup the link:#register-device[UnifiedPush server].
