---
layout: basic
title: AeroGear Android Data Store
---

== Data Store

AeroGear Android provides a simple data storage API.  This API is useful for caching responses, sharing data among different systems, or providing some form of limited offline support.  

=== API Overview  

link:/docs/specs/aerogear-android/org/jboss/aerogear/android/DataManager.html[*DataManager*] 
 : A factory and provider of link:/docs/specs/aerogear-android/org/jboss/aerogear/android/datamanager/Store.html[*Store*] implementations.  It behaves similarly to link:/docs/specs/aerogear-android/org/jboss/aerogear/android/Pipeline.html[*Pipeline*] and link:/docs/specs/aerogear-android/org/jboss/aerogear/android/authentication/impl/Authenticator.html[*Authenticator*]. Since link:/docs/specs/aerogear-android/org/jboss/aerogear/android/datamanager/Store.html[*Store*] implementations are synchronous, it does not have nor provide Loader wrappers.

link:/docs/specs/aerogear-android/org/jboss/aerogear/android/datamanager/Store.html[*Store*]
 : An interface which different store implementations implement.

link:/docs/specs/aerogear-android/org/jboss/aerogear/android/impl/datamanager/StoreTypes.html[*StoreTypes*]
: An enum class with values link:/docs/specs/aerogear-android/org/jboss/aerogear/android/impl/datamanager/StoreTypes.html#MEMORY[*MEMORY*] and link:/docs/specs/aerogear-android/org/jboss/aerogear/android/impl/datamanager/StoreTypes.html#SQL[*SQL*]. 

link:/docs/specs/aerogear-android/org/jboss/aerogear/android/impl/datamanager/SQLStore.html[*SQLStore*]  
: A Store implementation which writes to a backing SQLLite database.  

link:/docs/specs/aerogear-android/org/jboss/aerogear/android/impl/datamanager/MemoryStorage.html[*MemoryStore*]
: A Store implementation which is backed by a HashMap in memory.

=== How to use it

==== Creating a Memory Store

To create a link:/docs/specs/aerogear-android/org/jboss/aerogear/android/impl/datamanager/MemoryStorage.html[*MemoryStore*] we can use a link:/docs/specs/aerogear-android/org/jboss/aerogear/android/impl/datamanager/StoreConfig.html[*StoreConfig*] bean and link:/docs/specs/aerogear-android/org/jboss/aerogear/android/DataManager.html[*DataManager*]. A Memory store will go away when the application is removed from memory and is best used for short term caching.  

[source,java]
----
StoreConfig memoryStoreConfig = new StoreConfig(MyModel.class);  
memoryStoreConfig.setContext(getApplicationContext());  
memoryStoreConfig.setType(StoreTypes.MEMORY);  

DataManager dataManager = new DataManager();
Store store = dataManager.store("memoryStore", memoryStoreConfig);    
----

==== Creating a SQLStore

To create a link:/docs/specs/aerogear-android/org/jboss/aerogear/android/impl/datamanager/SQLStore.html[*SQLStore*] we can use a link:/docs/specs/aerogear-android/org/jboss/aerogear/android/impl/datamanager/StoreConfig.html[*StoreConfig*] bean and link:/docs/specs/aerogear-android/org/jboss/aerogear/android/DataManager.html[*DataManager*]. A SQL store needs to be opened using the `open` method. `Open` takes a link:/docs/specs/aerogear-android/org/jboss/aerogear/android/Callback.html[*Callback*] which is called after the database is ready for writing.

[source,java]
----
StoreConfig sqlStoreConfig = new StoreConfig(MyModel.class);  
sqlStoreConfig.setContext(getApplicationContext());  
sqlStoreConfig.setType(StoreTypes.SQL);  

DataManager dataManager = new DataManager();
Store store = dataManager.store("sqlStore", sqlStoreConfig);  
((SQLStore))store).open(/*callback*/);  
----

Both Store types implement the same interface. In the case of a link:/docs/specs/aerogear-android/org/jboss/aerogear/android/impl/datamanager/SQLStore.html[*SQLStore*] you will need to make sure open has been called before you use any of these methods however.

==== Object ID's

All objects which are stored or read from a store need to have an ID field. This field is annotated with the link:/docs/specs/aerogear-android/org/jboss/aerogear/android/RecordId.html[*@RecordId*] annotation in your class file.

[source,java]
----
@RecordId
private UUID id
----

The Store implementation will use an link:/docs/specs/aerogear-android/org/jboss/aerogear/android/datamanager/IdGenerator.html[*IdGenerator*] object to generate an id when you save the object. By default the Store will use link:/docs/specs/aerogear-android/org/jboss/aerogear/android/impl/datamanager/DefaultIdGenerator.html[DefaultIdGenerator] to create a new UUID value for your id field. If you are not using a UUID to represent your id field, you need to implement your own link:/docs/specs/aerogear-android/org/jboss/aerogear/android/datamanager/IdGenerator.html[*IdGenerator*]

Your link:/docs/specs/aerogear-android/org/jboss/aerogear/android/datamanager/IdGenerator.html[*IdGenerator*] which can be used for all your link:/docs/specs/aerogear-android/org/jboss/aerogear/android/DataManager.html[*DataManager*] stores

[source,java]
----
DataManager dataManager = new DataManager(new MyIdGenerator());
----

or just in a specific Store

[source,java]
----
StoreConfig storeConfig = new StoreConfig();
storeConfig.setIdGenerator(new MyIdGenerator());
----

PS: AeroGear does not control the id value. This is delegated to IdGenerator, so it's your (developer) responsibility to control it. 

==== Saving Data  

The method save is used to insert a new or update record. The Store will search for @RecordId and check if the field with this annotation is null

[source,java]
----
MyModel data = new MyModel();
data.setName("AeroGear Android");
data.setDescription("Awesome library");

store.save(data);  
----

==== Clearing the data store  

[source,java]
----
store.reset();  
----

==== Reading All Data  

[source,java]
----
Collection<MyModel> allData = store.readAll();  
----

==== Deleting Data  

[source,java]
----
store.remove(1); // Deletes the element with id 1  
----

Take a look at the complete example in our link:https://github.com/aerogear/aerogear-android-cookbook[cookbook app]

==== Encrypted Stores

If your storage information need to be encrypted, AeroGear provides convenient and transparent encrypted storage support. 

The Encrypted Store will be use link:https://github.com/aerogear/aerogear-crypto-java[aerogear-crypto-java] to encrypt/decrypt your data.

[source,java]
----
StoreConfig storeConfig = new StoreConfig(MyModel.class);
storeConfig.setContext(getApplicationContext());
storeConfig.setType(StoreTypes.ENCRYPTED_SQL);

Store store = (EncryptedSQLStore<MyModel>) dataManager.encryptedStore("cryptoStore", 
		storeConfig, "Your passphrase", MyModel.class);
----

If you want to see it all together, give a try to link:https://github.com/aerogear/aerogear-crypto-android-demo[AeroGear Crypto Demo app]. This application shows you how using encrypted storage you can store in a central point all your passwords.

